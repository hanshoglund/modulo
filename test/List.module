

module List
{
    import Std;
    
    // type Elem   = struct { x : Int32 };
    // type Filter = struct { x : Int32 };
    // type Equal     = struct { x : Int32 };
    // type Order    = struct { x : Int32 };
    // type Number    = struct { x : Int32 };
    // type Builder = struct { x : Int32 };
    // type List   = struct { x : Int32 }*;
    // 
    type Elem    = opaque;
    type Filter  = opaque;
    type Equal      = opaque;
    type Order     = opaque;
    type Number     = opaque;
    type Builder = opaque;
    type List    = opaque;
            
    nil     : () -> List;
    cons    : (Elem, List) -> List;
    snoc    : (Elem, List) -> List;
    head    : (List) -> Elem;
    tail    : (List) -> List;
    init    : (List) -> List;
    last    : (List) -> Elem;

    empty   : (List) -> Bool;
    lenght  : (List) -> Int;

    sort    : (Order, List) -> List;

    reverse         : (List) -> List;
    intersperse     : (Elem, List) -> List;

    build           : () -> Builder;
    builderAdd      : (Elem, Builder) -> Void;
    builderFinish   : (Builder) -> List;

    transpose       : (List) -> List;
    subsequences    : (List) -> List;
    permutations    : (List) -> List;
    concat          : (List) -> List;
    and             : (List) -> Bool;
    or              : (List) -> Bool;
    any             : (Filter, List) -> Bool;
    all             : (Filter, List) -> Bool;
    sum             : (Number, List) -> Elem;
    product         : (Number, List) -> Elem;
    maximum         : (Order, List) -> Elem;
    minimum         : (Order, List) -> Elem;
    // iterate         : (a -> a) -> a -> List;
    repeat          : (Elem) -> List;
    replicate       : (Int, Elem) -> List;
    cycle           : (List) -> List;
    take            : (Int, List) -> List;
    drop            : (Int, List) -> List;
    isPrefixOf      : (Equal, List, List) -> Bool;
    isSuffixOf      : (Equal, List, List) -> Bool;
    isInfixOf       : (Equal, List, List) -> Bool;
    elem            : (Equal, Elem, List) -> Bool;
    notElem         : (Equal, Elem, List) -> Bool;
    // find            : (a -> Bool) -> List -> Maybe a
    // filter          : (a -> Bool) -> List -> List
    // partition       : (a -> Bool) -> List -> (List, List)
    // (!!)            : List -> Int -> a
    // elemIndex       : Equal a => a -> List -> Maybe Int
    // elemIndices     : Equal a => a -> List -> [Int]
    // findIndex       : (a -> Bool) -> List -> Maybe Int
    // findIndices     : (a -> Bool) -> List -> [Int]
    // lines           : String -> [String]
    // words           : String -> [String]
    // unlines         : [String] -> String
    // unwords         : [String] -> String
    // nub             : Equal a => List -> List
    // delete          : Equal a => a -> List -> List
    // sort            : Order a => List -> List
    // insert          : Order a => a -> List -> List
    // unionBy         : (a -> a -> Bool) -> List -> List -> List
    // intersectBy     : (a -> a -> Bool) -> List -> List -> List
    // groupBy         : (a -> a -> Bool) -> List -> [List]
    // sortBy          : (a -> a -> Orderering) -> List -> List
    // insertBy        : (a -> a -> Orderering) -> a -> List -> List
    // maximumBy       : (a -> a -> Orderering) -> List -> a
    // minimumBy       : (a -> a -> Orderering) -> List -> a    
}